import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import io.github.cdimascio.dotenv.Dotenv;

import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class RobuxBot extends TelegramLongPollingBot {
    private final long ADMIN_ID = 8121028171L;
    private final DatabaseService db = new DatabaseService();
    private final Set<Long> authorizedAdmins = new HashSet<>();
    private final Map<Long, Integer> lastBotMessages = new ConcurrentHashMap<>();



    @Override
    public String getBotUsername() {
        return System.getenv("BOT_USERNAME");
    }

    @Override
    public String getBotToken() {
        return System.getenv("BOT_TOKEN");
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            int msgId = update.getMessage().getMessageId();
            String text = update.getMessage().getText();

            MessageUtils.deleteMessage(this, chatId, msgId);

            switch (text) {
                case "/start":
                    db.addUserIfNotExists(chatId);
                    MessageUtils.sendText(this, chatId, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! RobuxLoot —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–±—É–∫—Å–æ–≤! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ó–∞–¥–∞–Ω–∏—è. ", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    break;

                case "/login":
                    if (chatId == ADMIN_ID) {
                        authorizedAdmins.add(chatId);
                        MessageUtils.sendText(this, chatId, "‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω.", KeyboardFactory.adminKeyboard(), null, lastBotMessages);
                    } else {
                        MessageUtils.sendText(this, chatId, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    }
                    break;
                case "‚ùì –ü–æ–º–æ—â—å":
                    MessageUtils.sendText(this, chatId, "‚ùì –ü–æ–º–æ—â—å ‚Äî –ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞–ª—é—Ç—É\n" +
                            "–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n" +
                            "\n" +
                            "–ù–∞–∂–º–∏—Ç–µ \"\uD83D\uDCBC –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\", –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ \"\uD83E\uDD11 –í—ã–≤–æ–¥\".\n" +
                            "\n" +
                            "\uD83D\uDCAC–í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ:" +
                            "\n" +
                            "–í–∞—à –Ω–∏–∫ –≤ Roblox." +
                            "\n" +
                            "–ó–∞—Ç–µ–º –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∞.\n" +
                            "\n" +
                            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:" +
                            "\n" +
                            "–í—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ —Å –≥–µ–π–º–ø–∞—Å—Å–æ–º –∏ —Ü–µ–Ω–æ–π –∫–æ—Ç–æ—Ä—É—é –≤—ã–¥–∞–ª –±–æ—Ç.\n" +
                            "\n" +
                            "\uD83D\uDCAC –í–∞–∂–Ω–æ:\n" +
                            "–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    break;

                case "üíº –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
                    int robux = db.getRobux(chatId);
                    int completed = db.getCompletedTasks(chatId);
                    String profile = "–†–æ–±—É–∫—Å—ã: " + robux + "\n–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: " + completed;
                    MessageUtils.sendText(this, chatId, profile, KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    break;

                case "üìã –ó–∞–¥–∞–Ω–∏—è":
                    List<Task> tasks = db.getAllTasks();
                    MessageUtils.sendText(this, chatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:", KeyboardFactory.taskKeyboard(tasks, 1, 6), null, lastBotMessages);
                    break;

                case "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
                case "üìä –û—Ç—á—ë—Ç":
                case "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥":
                    if (authorizedAdmins.contains(chatId)) {
                        handleAdminCommands(chatId, text);
                    } else {
                        MessageUtils.sendText(this, chatId, "‚õî –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    }
                    break;

                default:
                    MessageUtils.sendText(this, chatId, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
            }
        } else if (update.hasCallbackQuery()) {
            CallbackQuery callback = update.getCallbackQuery();
            String data = callback.getData();
            long chatId = callback.getMessage().getChatId();
            int messageId = callback.getMessage().getMessageId();

            if (data.startsWith("tasks_prev_")) {
                int currentPage = Integer.parseInt(data.substring("tasks_prev_".length()));
                editTaskPage(chatId, messageId, db.getAllTasks(), currentPage - 1);
            } else if (data.startsWith("tasks_next_")) {
                int currentPage = Integer.parseInt(data.substring("tasks_next_".length()));
                editTaskPage(chatId, messageId, db.getAllTasks(), currentPage + 1);
            } else if (data.startsWith("task_")) {
                int taskIndex = Integer.parseInt(data.substring("task_".length()));
                Task task = db.getAllTasks().get(taskIndex);
                MessageUtils.sendText(this, chatId, "üìù " + task.getTitle() + "\n\n" + task.getDescription(), KeyboardFactory.mainKeyboard(), null, lastBotMessages);
            } else if (data.startsWith("withdrawals_prev_")) {
                int currentPage = Integer.parseInt(data.substring("withdrawals_prev_".length()));
                editWithdrawalPage(chatId, messageId, db.getAllWithdrawalRequests(), currentPage - 1);
            } else if (data.startsWith("withdrawals_next_")) {
                int currentPage = Integer.parseInt(data.substring("withdrawals_next_".length()));
                editWithdrawalPage(chatId, messageId, db.getAllWithdrawalRequests(), currentPage + 1);
            } else if (data.startsWith("withdrawal_")) {
                int index = Integer.parseInt(data.substring("withdrawal_".length()));
                WithdrawalRequest req = db.getAllWithdrawalRequests().get(index);
                String info = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + req.getUserId() +
                        "\nüí∞ –°—É–º–º–∞: " + req.getAmount() +
                        "\nüìÖ –î–∞—Ç–∞: " + req.getDate();
                MessageUtils.sendText(this, chatId, info, KeyboardFactory.adminKeyboard(), null, lastBotMessages);
            }
        }
    }

    private void editTaskPage(long chatId, int messageId, List<Task> tasks, int page) {
        try {
            EditMessageText edit = new EditMessageText();
            edit.setChatId(String.valueOf(chatId));
            edit.setMessageId(messageId);
            edit.setText("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:");
            edit.setReplyMarkup(KeyboardFactory.taskKeyboard(tasks, page, 6));
            execute(edit);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void editWithdrawalPage(long chatId, int messageId, List<WithdrawalRequest> requests, int page) {
        try {
            EditMessageText edit = new EditMessageText();
            edit.setChatId(String.valueOf(chatId));
            edit.setMessageId(messageId);
            edit.setText("üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:");
            edit.setReplyMarkup(KeyboardFactory.withdrawalKeyboard(requests, page, 6));
            execute(edit);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleAdminCommands(long chatId, String command) {
        switch (command) {
            case "üìä –û—Ç—á—ë—Ç":
                int users = db.countUsers();
                MessageUtils.sendText(this, chatId, "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + users, KeyboardFactory.adminKeyboard(), null, lastBotMessages);
                break;
            case "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥":
                List<WithdrawalRequest> requests = db.getAllWithdrawalRequests();
                MessageUtils.sendText(this, chatId, "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:",
                        KeyboardFactory.withdrawalKeyboard(requests, 1, 6), // –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                        KeyboardFactory.adminKeyboard(), // –æ–±—ã—á–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
                        lastBotMessages);
                break;
        }
    }
}
