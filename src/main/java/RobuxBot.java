import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;


import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class RobuxBot extends TelegramLongPollingBot {
    private final long ADMIN_ID = 8121028171L;
    private final DatabaseService db = new DatabaseService();
    private final Set<Long> authorizedAdmins = new HashSet<>();
    private final Map<Long, Integer> lastBotMessages = new ConcurrentHashMap<>();

    private final Map<Long, WithdrawState> withdrawStates = new HashMap<>();
    private final Set<Long> awaitingAmount = new HashSet<>();
    private final Set<Long> awaitingNickname = new HashSet<>();




    @Override
    public String getBotUsername() {
        return System.getenv("BOT_USERNAME");
    }

    @Override
    public String getBotToken() {
        return System.getenv("BOT_TOKEN");
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            int msgId = update.getMessage().getMessageId();
            Message message = update.getMessage();
            long telegramId = message.getFrom().getId();
            String username = message.getFrom().getUserName();
            if (username == null) {
                username = "unknown";
            }
            String text = update.getMessage().getText();

            MessageUtils.deleteMessage(this, chatId, msgId);
            if (text.startsWith("/start")) {
                String[] parts = text.split(" ");
                Long referrerId = null;

                if (parts.length == 2) {
                    try {
                        referrerId = Long.parseLong(parts[1]);
                    } catch (NumberFormatException ignored) {}
                }

                db.addUserIfNotExists(telegramId, username, referrerId);

                MessageUtils.sendText(this, chatId,
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! RobuxLoot ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —Ä–æ–±—É–∫—Å–æ–≤! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ó–∞–¥–∞–Ω–∏—è.",
                        KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                return;
            }
            if (awaitingAmount.contains(telegramId)) {
                String amountText = text.trim();

                try {
                    int amount = Integer.parseInt(amountText);
                    int balance = db.getRobux(telegramId);
                    int referrers = db.getRef(telegramId);


                    if (amount < 100) {
                        MessageUtils.sendText(this, chatId, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 100", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                        return;
                    }
                    if (amount > balance) {
                        MessageUtils.sendText(this, chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–æ–±—É–∫—Å–æ–≤", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                        return;
                    }
                    if (referrers < 5) {
                        MessageUtils.sendText(this, chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 5 –∏ –±–æ–ª—å—à–µ!", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                        return;
                    }

                    WithdrawState state = withdrawStates.getOrDefault(telegramId, new WithdrawState());
                    state.setAmount(amount);
                    state.setStage(1);
                    withdrawStates.put(telegramId, state);

                    MessageUtils.sendText(this, chatId, "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username –≤ Roblox.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    awaitingAmount.remove(telegramId);
                    awaitingNickname.add(telegramId);

                } catch (NumberFormatException e) {
                awaitingAmount.remove(telegramId);
                MessageUtils.sendText(this, chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
            }

                return;
            }
            if (awaitingNickname.contains(telegramId)) {
                String nickname = text.trim();

                WithdrawState state = withdrawStates.getOrDefault(telegramId, null);
                if (state == null || state.getStage() != 1) {
                    MessageUtils.sendText(this, chatId, "‚ùó –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    return;
                }

                state.setNickname(nickname);
                state.setStage(2);
                withdrawStates.put(telegramId, state);

                db.addWithdrawalRequest(telegramId, state.getAmount(), nickname);

                MessageUtils.sendText(this, chatId, "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", KeyboardFactory.mainKeyboard(), null, lastBotMessages);

                awaitingNickname.remove(telegramId);
                return;
            }

            switch (text) {
                case "/login":
                    if (chatId == ADMIN_ID) {
                        authorizedAdmins.add(chatId);
                        MessageUtils.sendText(this, chatId, "‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω.", KeyboardFactory.adminKeyboard(), null, lastBotMessages);
                    } else {
                        MessageUtils.sendText(this, chatId, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    }
                    break;
                case "‚ùì –ü–æ–º–æ—â—å":
                    MessageUtils.sendText(this, chatId, "‚ùì –ü–æ–º–æ—â—å ‚Äî –ö–∞–∫ –≤—ã–≤–µ—Å—Ç–∏ –≤–∞–ª—é—Ç—É\n" +
                            "–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n" +
                            "\n" +
                            "–ù–∞–∂–º–∏—Ç–µ \"\uD83D\uDCBC –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\", –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ üí∏ –í—ã–≤–µ—Å—Ç–∏\".\n" +
                            "\n" +
                            "\uD83D\uDCAC–í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ:" +
                            "\n" +
                            "–í–∞—à –Ω–∏–∫ –≤ Roblox." +
                            "\n" +
                            "–ó–∞—Ç–µ–º –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –≤—ã–≤–æ–¥–∞.\n" +
                            "\n" +
                            "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏:" +
                            "\n" +
                            "–í—ã –¥–æ–ª–∂–Ω—ã –±—É–¥–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ä—Ç—É –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∞–∫–∫–∞—É–Ω—Ç–µ —Å –≥–µ–π–º–ø–∞—Å—Å–æ–º –∏ —Ü–µ–Ω–æ–π –∫–æ—Ç–æ—Ä—É—é –≤—ã–¥–∞–ª –±–æ—Ç.\n" +
                            "\n" +
                            "\uD83D\uDCAC –í–∞–∂–Ω–æ:\n" +
                            "–í—ã–ø–ª–∞—Ç–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—ã–≤–æ–¥.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    break;

                case "üíº –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
                    int robux = db.getRobux(telegramId);
                    int completed = db.getCompletedTasks(telegramId);
                    int referrers = db.getRef(telegramId);
                    String profile = "üë§ –ü—Ä–æ—Ñ–∏–ª—å: @" + (username != null ? username : "–ë–µ–∑ –Ω–∏–∫–∞") +
                            "\nüÜî ID: " + telegramId +
                            "\nüí∞ –†–æ–±—É–∫—Å—ã: " + robux +
                            "\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: " + completed +
                            "\nüë§ –†–µ—Ñ–µ—Ä–∞–ª—ã: " + referrers +
                            "\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: https://t.me/" + getBotUsername() + "?start=" + telegramId;

                    MessageUtils.sendText(this, chatId, profile, KeyboardFactory.profileKeyboard(), null, lastBotMessages);
                    break;
                case "üìã –ó–∞–¥–∞–Ω–∏—è":
                    List<Task> tasks = db.getAvailableTasks(telegramId);
                    MessageUtils.sendText(this, chatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è(—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ):", KeyboardFactory.taskKeyboard(tasks, 1, 6), null, lastBotMessages);
                    break;
                case "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
                case "üìä –û—Ç—á—ë—Ç":
                case "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥":
                    if (authorizedAdmins.contains(chatId)) {
                        handleAdminCommands(chatId, text);
                    } else {
                        MessageUtils.sendText(this, chatId, "‚õî –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    }
                    break;

                default:
                    MessageUtils.sendText(this, chatId, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
            }
        } else if (update.hasCallbackQuery()) {
            CallbackQuery callback = update.getCallbackQuery();
            String data = callback.getData();
            long chatId = callback.getMessage().getChatId();
            int messageId = callback.getMessage().getMessageId();
            long telegramId = callback.getFrom().getId();

            if (data.startsWith("tasks_prev_")) {
                int currentPage = Integer.parseInt(data.substring("tasks_prev_".length()));
                editTaskPage(chatId, messageId, db.getAvailableTasks(telegramId), currentPage - 1);
            } else if (data.startsWith("tasks_next_")) {
                int currentPage = Integer.parseInt(data.substring("tasks_next_".length()));
                editTaskPage(chatId, messageId, db.getAvailableTasks(telegramId), currentPage + 1);
            } else if (data.startsWith("task_")) {
                int taskIndex = Integer.parseInt(data.substring("task_".length()));
                Task task = db.getAvailableTasks(telegramId).get(taskIndex);
                InlineKeyboardMarkup keyboard = KeyboardFactory.taskDetailsKeyboard(task);
                String text = "üìù " + task.getTitle() + "\n\n" +
                        task.getDescription() + "\n\n" +
                        "üí∞ –ù–∞–≥—Ä–∞–¥–∞: " + task.getReward() + "–†–æ–±—É–∫—Å–æ–≤";

                MessageUtils.sendText(this, chatId, text, keyboard, null, lastBotMessages);
            }
            else if (data.startsWith("check_task_")) {
            long taskId = Long.parseLong(data.substring("check_task_".length()));


            Task task = null;
            for (Task t : db.getAvailableTasks(telegramId)) {
                if (t.getId() == taskId) {
                    task = t;
                    break;
                }
            }

            if (task == null) {
                MessageUtils.sendText(this, chatId, "‚ùó –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                return;
            }

            boolean success = false;


            if (task.getType().equals("subscribe")) {
                success = SubscriptionChecker.isSubscribed(this, telegramId, task.getChannelUsername());
            }


            if (success) {
                boolean submitted = db.submitTask(telegramId, taskId);
                if (submitted) {
                    MessageUtils.sendText(this, chatId,
                            "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ " + task.getReward() + " —Ä–æ–±—É–∫—Å–æ–≤.",
                            KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                } else {
                    MessageUtils.sendText(this, chatId,
                            "‚ö†Ô∏è –í—ã —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–ª–∏ —ç—Ç–æ –∑–∞–¥–∞–Ω–∏–µ.",
                            KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                }
            } else {
                MessageUtils.sendText(this, chatId,
                        "‚ùå –í—ã –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        KeyboardFactory.mainKeyboard(), null, lastBotMessages);
            }} else if (data.equals("withdraw_request")) {
                awaitingAmount.add(telegramId);
                withdrawStates.put(telegramId, new WithdrawState());
                MessageUtils.sendText(this, chatId, "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",KeyboardFactory.mainKeyboard(),null, lastBotMessages);

            } else if (data.startsWith("withdrawals_prev_")) {
                int currentPage = Integer.parseInt(data.substring("withdrawals_prev_".length()));
                editWithdrawalPage(chatId, messageId, db.getAllWithdrawalRequests(), currentPage - 1);
            } else if (data.startsWith("withdrawals_next_")) {
                int currentPage = Integer.parseInt(data.substring("withdrawals_next_".length()));
                editWithdrawalPage(chatId, messageId, db.getAllWithdrawalRequests(), currentPage + 1);
            } else if (data.startsWith("withdrawal_")) {
                int index = Integer.parseInt(data.substring("withdrawal_".length()));
                WithdrawalRequest req = db.getAllWithdrawalRequests().get(index);
                String info = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + req.getUserId() +
                        "\nüí∞ –°—É–º–º–∞: " + req.getAmount();
                MessageUtils.sendText(this, chatId, info, KeyboardFactory.adminKeyboard(), null, lastBotMessages);
            } else if (data.equals("back_to_menu")) {

            MessageUtils.sendText(this, chatId,
                    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    KeyboardFactory.mainKeyboard(), null, lastBotMessages);
            MessageUtils.deleteMessage(this, chatId, messageId);
        }
            else if (data.equals("back_to_tasks")) {

                List<Task> tasks = db.getAvailableTasks(telegramId);
                MessageUtils.sendText(this, chatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è(—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ):", KeyboardFactory.taskKeyboard(tasks, 1, 6), null, lastBotMessages);
            }

        }
    }

    private void editTaskPage(long chatId, int messageId, List<Task> tasks, int page) {
        try {
            EditMessageText edit = new EditMessageText();
            edit.setChatId(String.valueOf(chatId));
            edit.setMessageId(messageId);
            edit.setText("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è:");
            edit.setReplyMarkup(KeyboardFactory.taskKeyboard(tasks, page, 6));
            execute(edit);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void editWithdrawalPage(long chatId, int messageId, List<WithdrawalRequest> requests, int page) {
        try {
            EditMessageText edit = new EditMessageText();
            edit.setChatId(String.valueOf(chatId));
            edit.setMessageId(messageId);
            edit.setText("üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:");
            edit.setReplyMarkup(KeyboardFactory.withdrawalKeyboard(requests, page, 6));
            execute(edit);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleAdminCommands(long chatId, String command) {
        switch (command) {
            case "üìä –û—Ç—á—ë—Ç":
                int users = db.countUsers();
                MessageUtils.sendText(this, chatId, "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + users, KeyboardFactory.adminKeyboard(), null, lastBotMessages);
                break;
            case "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥":
                List<WithdrawalRequest> requests = db.getAllWithdrawalRequests();
                MessageUtils.sendText(this, chatId, "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:",
                        KeyboardFactory.withdrawalKeyboard(requests, 1, 6),
                        KeyboardFactory.adminKeyboard(),
                        lastBotMessages);
                break;
        }
    }
}
