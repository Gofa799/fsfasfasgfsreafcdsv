import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.groupadministration.GetChatMember;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.chatmember.ChatMember;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;


import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

public class RobuxBot extends TelegramLongPollingBot {
    private final long ADMIN_ID = 8121028171L;
    private final DatabaseService db = new DatabaseService();
    private final Set<Long> authorizedAdmins = new HashSet<>();
    private final Map<Long, Integer> lastBotMessages = new ConcurrentHashMap<>();

    private final Map<Long, WithdrawState> withdrawStates = new HashMap<>();
    private final Set<Long> awaitingAmount = new HashSet<>();
    private final Set<Long> awaitingNickname = new HashSet<>();
    private final Map<Long, Boolean> awaitingBroadcastText = new ConcurrentHashMap<>();




    @Override
    public String getBotUsername() {
        return System.getenv("BOT_USERNAME");
    }

    @Override
    public String getBotToken() {
        return System.getenv("BOT_TOKEN");
    }

    private final SubgramClient subgramClient = new SubgramClient(System.getenv("SUBGRAM_TOKEN"));

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            long chatId = update.getMessage().getChatId();
            int msgId = update.getMessage().getMessageId();
            Message message = update.getMessage();
            long telegramId = message.getFrom().getId();
            String username = message.getFrom().getUserName();
            if (username == null) {
                username = "unknown";
            }
            String text = update.getMessage().getText();

            MessageUtils.deleteMessage(this, chatId, msgId);
            if (text.startsWith("/start")) {
                String[] parts = text.split(" ");
                Long referrerId = null;

                if (parts.length == 2) {
                    try {
                        referrerId = Long.parseLong(parts[1]);
                    } catch (NumberFormatException ignored) {}
                }

                db.addUserIfNotExists(telegramId, username, referrerId);

                MessageUtils.sendText(this, chatId,
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! RobuxLoot ‚Äî —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ñ–∞—Ä–º–∞ R! –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ó–∞–¥–∞–Ω–∏—è.",
                        KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                return;
            }
            if (awaitingAmount.contains(telegramId)) {
                String amountText = text.trim();

                try {
                    int amount = Integer.parseInt(amountText);
                    int balance = db.getRobux(telegramId);
                    int referrers = db.getRef(telegramId);


                    if (amount < 10) {
                        MessageUtils.sendText(this, chatId, "‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 10", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                        return;
                    }
                    if (amount > balance) {
                        MessageUtils.sendText(this, chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç–æ–∫", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                        awaitingAmount.remove(telegramId);
                        return;
                    }
                    if (referrers < 3) {
                        MessageUtils.sendText(this, chatId, "‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥—Ä—É–∑–µ–π, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 3 –∏ –±–æ–ª—å—à–µ!", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                        awaitingAmount.remove(telegramId);
                        return;
                    }

                    WithdrawState state = withdrawStates.getOrDefault(telegramId, new WithdrawState());
                    state.setAmount(amount);
                    state.setStage(1);
                    withdrawStates.put(telegramId, state);

                    MessageUtils.sendText(this, chatId, "‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à username –≤ Roblox.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    awaitingAmount.remove(telegramId);
                    awaitingNickname.add(telegramId);

                } catch (NumberFormatException e) {
                awaitingAmount.remove(telegramId);
                MessageUtils.sendText(this, chatId, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
            }

                return;
            }
            if (awaitingNickname.contains(telegramId)) {
                String nickname = text.trim();

                WithdrawState state = withdrawStates.getOrDefault(telegramId, null);
                if (state == null || state.getStage() != 1) {
                    MessageUtils.sendText(this, chatId, "‚ùó –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –ø–æ–∑–∂–µ.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    return;
                }

                state.setNickname(nickname);
                state.setStage(2);
                withdrawStates.put(telegramId, state);

                db.addWithdrawalRequest(telegramId, state.getAmount(), nickname);

                MessageUtils.sendText(this, chatId, "‚úÖ –ó–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!", KeyboardFactory.mainKeyboard(), null, lastBotMessages);

                awaitingNickname.remove(telegramId);
                return;
            }
            if (awaitingBroadcastText.getOrDefault(chatId, false)) {
                awaitingBroadcastText.put(chatId, false);
                broadcastMessage(text);
                MessageUtils.sendText(this, chatId, "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.", KeyboardFactory.adminKeyboard(),null, lastBotMessages);
                return;
            }

            switch (text) {
                case "/login":
                    if (chatId == ADMIN_ID) {
                        authorizedAdmins.add(chatId);
                        MessageUtils.sendText(this, chatId, "‚úÖ –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ –∞–¥–º–∏–Ω.", KeyboardFactory.adminKeyboard(), null, lastBotMessages);
                    } else {
                        MessageUtils.sendText(this, chatId, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    }
                    break;
                case "‚ùì –ü–æ–º–æ—â—å":
                    MessageUtils.sendText(this, chatId, "‚ùì –ü–æ–º–æ—â—å ‚Äî –ö–∞–∫ –æ–±–º–µ–Ω—è—Ç—å –º–æ–Ω–µ—Ç–∫–∏\n" +
                            "–ß—Ç–æ–±—ã –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—ã–≤–æ–¥, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:\n" +
                            "\n" +
                            "–ù–∞–∂–º–∏—Ç–µ \"\uD83D\uDCBC –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\", –∑–∞—Ç–µ–º –≤—ã–±–µ—Ä–∏—Ç–µ üí∏ –û–±–º–µ–Ω—è—Ç—å\".\n" +
                            "\n" +
                            "\uD83D\uDCAC–í –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —É–∫–∞–∂–∏—Ç–µ:" +
                            "\n" +
                            "–í–∞—à –Ω–∏–∫ –≤ —Ä–æ–±–ª–æk—Å." +
                            "\n" +
                            "–ó–∞—Ç–µ–º –∂–µ–ª–∞–µ–º—É—é —Å—É–º–º—É –æ–±–º–µ–Ω–∞(1 –º–æ–Ω–µ—Ç–∫–∞ = 1R). –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –æ–±–º–µ–Ω–∞ 10 –º–æ–Ω–µ—Ç–æ–∫(10R)\n" +
                            "–£ –≤–∞—Å –¥–æ–ª–∂–µ–Ω —Å—Ç–æ—è—Ç—å –≥–µ–π–º–ø–∞—Å—Å –Ω–∞ —Å—É–º–º—É –∫–æ—Ç–æ—Ä—É—é –≤—ã –≤—ã–≤–æ–¥–∏—Ç–µ, –∏–Ω–∞—á–µ –≤—ã–≤–µ—Å—Ç–∏ –Ω–µ –ø–æ–ª—É—á–∏—Ç—Å—è" +
                            "\n" +
                            "\uD83D\uDCAC –í–∞–∂–Ω–æ:\n" +
                            "–û–±–º–µ–Ω –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 7 –¥–Ω–µ–π –ø–æ—Å–ª–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ–±–º–µ–Ω.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    break;

                case "üíº –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç":
                    int robux = db.getRobux(telegramId);
                    int completed = db.getCompletedTasks(telegramId);
                    int referrers = db.getRef(telegramId);
                    String profile = "üë§ –ü—Ä–æ—Ñ–∏–ª—å: @" + (username != null ? username : "–ë–µ–∑ –Ω–∏–∫–∞") +
                            "\nüÜî ID: " + telegramId +
                            "\nüí∞ –ú–æ–Ω–µ—Ç–∫–∏: " + robux +
                            "\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: " + completed +
                            "\nüë§ –î—Ä—É–∑—å—è: " + referrers +
                            "\nüîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –¥—Ä—É–≥–∞: https://t.me/" + getBotUsername() + "?start=" + telegramId;

                    MessageUtils.sendText(this, chatId, profile, KeyboardFactory.profileKeyboard(), null, lastBotMessages);
                    break;
                case "üìã –ó–∞–¥–∞–Ω–∏—è":
                    List<Task> tasks = db.getAvailableTasks(telegramId);
                    MessageUtils.sendText(this, chatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è(—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ):", KeyboardFactory.taskKeyboard(tasks, 1, 6), null, lastBotMessages);
                    break;
                case "üéØ–ó–∞–¥–∞–Ω–∏—è":
                    handleSubgramTask(chatId, telegramId);
                    break;
                case "üõ† –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å":
                case "üìä –û—Ç—á—ë—Ç":
                case "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥":
                case "üì® –†–∞—Å—Å—ã–ª–∫–∞":
                case "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏":
                    if (authorizedAdmins.contains(chatId)) {
                        handleAdminCommands(chatId, text);
                    } else {
                        MessageUtils.sendText(this, chatId, "‚õî –ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                    }
                    break;

                default:
                    MessageUtils.sendText(this, chatId, "ü§î –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
            }
        } else if (update.hasCallbackQuery()) {
            CallbackQuery callback = update.getCallbackQuery();
            String data = callback.getData();
            long chatId = callback.getMessage().getChatId();
            int messageId = callback.getMessage().getMessageId();
            long telegramId = callback.getFrom().getId();

            if (data.startsWith("retry_sub_")) {
                String opId = data.replace("retry_sub_", "");
                SubgramTask task = db.getSubgramTaskByOpId(opId);
                if (task == null) {
                    MessageUtils.sendText(this, chatId, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ.", null, null, lastBotMessages);
                    return;
                }

                boolean subscribed = subgramClient.checkSubscription(chatId, opId);

                if (subscribed) {
                    db.markSubgramTaskCompleted(chatId, opId);
                    db.addBalance(chatId, 1);
                    MessageUtils.sendText(this, chatId,
                            "üéâ–¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ 1 –º–æ–Ω–µ—Ç–∫–∞.",
                            KeyboardFactory.nextTaskButton(),
                            null,
                            lastBotMessages);
                } else {
                    MessageUtils.sendText(this, chatId,
                            "‚ùóÔ∏è–ü–æ—Ö–æ–∂–µ, —Ç—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ \"–ü—Ä–æ–≤–µ—Ä–∏—Ç—å\".",
                            KeyboardFactory.retryConfirmButton(opId),
                            null,
                            lastBotMessages);
                }
            }

            if (data.equals("get_next_task")) {
                handleSubgramTask(chatId, chatId);
            }

            if (data.startsWith("tasks_prev_")) {
                int currentPage = Integer.parseInt(data.substring("tasks_prev_".length()));
                editTaskPage(chatId, messageId, db.getAvailableTasks(telegramId), currentPage - 1);
            } else if (data.startsWith("tasks_next_")) {
                int currentPage = Integer.parseInt(data.substring("tasks_next_".length()));
                editTaskPage(chatId, messageId, db.getAvailableTasks(telegramId), currentPage + 1);
            } else if (data.startsWith("task_")) {
                int taskIndex = Integer.parseInt(data.substring("task_".length()));
                Task task = db.getAvailableTasks(telegramId).get(taskIndex);
                InlineKeyboardMarkup keyboard = KeyboardFactory.taskDetailsKeyboard(task);
                String text = "üìù " + task.getTitle() + "\n\n" +
                        task.getDescription() + "\n\n" +
                        "üí∞ –ù–∞–≥—Ä–∞–¥–∞: " + task.getReward() + "–º–æ–Ω–µ—Ç–æ–∫";

                MessageUtils.sendText(this, chatId, text, keyboard, null, lastBotMessages);
            }
            if (data.startsWith("confirm_sub_")) {
                String opId = data.replace("confirm_sub_", "");
                long userId = callback.getFrom().getId();

                SubgramTask task = db.getSubgramTaskByOpId(opId);
                if (task == null) {
                    MessageUtils.sendText(this, chatId,
                            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∑–∞–¥–∞–Ω–∏–µ.",
                            KeyboardFactory.mainKeyboard(),
                            null,
                            lastBotMessages);
                    return;
                }

                boolean subscribed = subgramClient.checkSubscription(userId, opId);

                if (subscribed) {
                    MessageUtils.sendText(this, chatId,
                                "üéâ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–±–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∞ 1 –º–æ–Ω–µ—Ç–∫–∞",
                                KeyboardFactory.nextTaskButton(),
                                null,
                                lastBotMessages);

                } else {
                    MessageUtils.sendText(this, chatId,
                            "‚ùó –ü–æ—Ö–æ–∂–µ, —Ç—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                            KeyboardFactory.retryConfirmButton(opId),
                            null,
                            lastBotMessages);
                }
            }
            else if (data.equals("sex_male") || data.equals("sex_female")) {
                String sex = data.equals("sex_male") ? "male" : "female";
                db.setUserSex(telegramId, sex);
                MessageUtils.sendText(this, chatId, "‚úÖ –ü–æ–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω! –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–π—Ç–∏ –∫ –∑–∞–¥–∞–Ω–∏—è–º", KeyboardFactory.mainKeyboard(), null,lastBotMessages);
                handleSubgramTask(chatId, telegramId);
            }
            else if (data.startsWith("check_task_")) {
            long taskId = Long.parseLong(data.substring("check_task_".length()));


            Task task = null;
            for (Task t : db.getAvailableTasks(telegramId)) {
                if (t.getId() == taskId) {
                    task = t;
                    break;
                }
            }

            if (task == null) {
                MessageUtils.sendText(this, chatId, "‚ùó –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                return;
            }

            boolean success = false;


            if (task.getType().equals("subscribe")) {
                success = SubscriptionChecker.isSubscribed(this, telegramId, task.getChannelUsername());
            }


            if (success) {
                boolean submitted = db.submitTask(telegramId, taskId);
                if (submitted) {
                    MessageUtils.sendText(this, chatId,
                            "‚úÖ –ó–∞–¥–∞–Ω–∏–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ " + task.getReward() + " –º–æ–Ω–µ—Ç–æ–∫.",
                            KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                } else {
                    MessageUtils.sendText(this, chatId,
                            "‚ö†Ô∏è –í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ –ó–∞–¥–∞–Ω–∏–µ.",
                            KeyboardFactory.mainKeyboard(), null, lastBotMessages);
                }
            } else {
                MessageUtils.sendText(this, chatId,
                        "‚ùå –í—ã –µ—â—ë –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –ó–∞–¥–∞–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –µ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                        KeyboardFactory.mainKeyboard(), null, lastBotMessages);
            }} else if (data.equals("withdraw_request")) {
                awaitingAmount.add(telegramId);
                withdrawStates.put(telegramId, new WithdrawState());
                MessageUtils.sendText(this, chatId, "üí∏ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:",KeyboardFactory.mainKeyboard(),null, lastBotMessages);

            } else if (data.startsWith("withdrawals_prev_")) {
                int currentPage = Integer.parseInt(data.substring("withdrawals_prev_".length()));
                editWithdrawalPage(chatId, messageId, db.getAllWithdrawalRequests(), currentPage - 1);
            } else if (data.startsWith("withdrawals_next_")) {
                int currentPage = Integer.parseInt(data.substring("withdrawals_next_".length()));
                editWithdrawalPage(chatId, messageId, db.getAllWithdrawalRequests(), currentPage + 1);
            } else if (data.startsWith("withdrawal_")) {
                int index = Integer.parseInt(data.substring("withdrawal_".length()));
                WithdrawalRequest req = db.getAllWithdrawalRequests().get(index);
                String info = "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + req.getUserId() +
                        "\nüí∞ –°—É–º–º–∞: " + req.getAmount();
                MessageUtils.sendText(this, chatId, info, KeyboardFactory.adminKeyboard(), null, lastBotMessages);
            } else if (data.equals("back_to_menu")) {

            MessageUtils.sendText(this, chatId,
                    "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                    KeyboardFactory.mainKeyboard(), null, lastBotMessages);
            MessageUtils.deleteMessage(this, chatId, messageId);
        }
            else if (data.equals("back_to_tasks")) {

                List<Task> tasks = db.getAvailableTasks(telegramId);
                MessageUtils.sendText(this, chatId, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏—Å–ø—ã—Ç–∞–Ω–∏—è(—Å–∫–æ—Ä–æ –±—É–¥–µ—Ç –±–æ–ª—å—à–µ):", KeyboardFactory.taskKeyboard(tasks, 1, 6), null, lastBotMessages);
            }

        }
    }

    private void editTaskPage(long chatId, int messageId, List<Task> tasks, int page) {
        try {
            EditMessageText edit = new EditMessageText();
            edit.setChatId(String.valueOf(chatId));
            edit.setMessageId(messageId);
            edit.setText("–ó–∞–¥–∞–Ω–∏—è:");
            edit.setReplyMarkup(KeyboardFactory.taskKeyboard(tasks, page, 6));
            execute(edit);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void handleSubgramTask(long chatId, long userId) {
        User user = db.getUser(userId);

        if (user.getSex() == null || user.getSex().isEmpty()) {
            MessageUtils.sendText(this, chatId,
                    "üë§ –£–∫–∞–∂–∏ —Å–≤–æ–π –ø–æ–ª, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è:",
                    KeyboardFactory.genderButtons(),
                    null,
                    lastBotMessages);
            return;
        }

        List<String> excludeChannels = new ArrayList<>();
        SubgramTask task = subgramClient.getTask(user, excludeChannels);

        if (task == null || task.getLinks() == null || task.getLinks().isEmpty()) {
            MessageUtils.sendText(this, chatId,
                    "üîÑ –°–µ–π—á–∞—Å –Ω–µ—Ç –∑–∞–¥–∞–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.",
                    KeyboardFactory.mainKeyboard(),
                    null,
                    lastBotMessages);
            return;
        }

        db.saveSubgramTask(task);

        String link = task.getLinks().get(0);

        String text = """
            üìå –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª (‚ùó–ù–µ –æ—Ç–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –¥–æ –≤—ã–≤–æ–¥–∞ —Ä–æ–±—É–∫—Å–æ–≤):

            üí∞ –ù–∞–≥—Ä–∞–¥–∞: 1 –º–æ–Ω–µ—Ç–∫–∞ (1 —Ä–±)
            """;

        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        rows.add(List.of(
                InlineKeyboardButton.builder()
                        .text("–ü–û–î–ü–ò–°–ê–¢–¨–°–Ø")
                        .url(link)
                        .build()
        ));


        rows.add(List.of(
                InlineKeyboardButton.builder()
                        .text("‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è")
                        .callbackData("confirm_sub_" + task.getOpId())
                        .build()
        ));

        InlineKeyboardMarkup markup = new InlineKeyboardMarkup(rows);
        MessageUtils.sendText(this, chatId, text, markup, null, lastBotMessages);
    }

    private void editWithdrawalPage(long chatId, int messageId, List<WithdrawalRequest> requests, int page) {
        try {
            EditMessageText edit = new EditMessageText();
            edit.setChatId(String.valueOf(chatId));
            edit.setMessageId(messageId);
            edit.setText("üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:");
            edit.setReplyMarkup(KeyboardFactory.withdrawalKeyboard(requests, page, 6));
            execute(edit);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    private void checkSubscriptions(long adminChatId) {
        System.out.println("üîç –ù–∞—á–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫");
        List<Submission> submissions = db.getAllSubscribeSubmissions();
        System.out.println("üëÄ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: " + submissions.size());
        if (submissions.isEmpty()) {
            MessageUtils.sendText(this, adminChatId, "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π", KeyboardFactory.adminKeyboard(), null, lastBotMessages);
            return;
        }

        int checked = 0, removed = 0;

        for (Submission s : submissions) {
            try {
                String channel = s.getChannel();
                if (!channel.startsWith("@")) {
                    channel = "@" + channel;
                }

                GetChatMember chatMember = new GetChatMember();
                chatMember.setChatId(channel);
                chatMember.setUserId(s.getUserId());

                ChatMember member = execute(chatMember);
                String status = member.getStatus();

                if (status.equals("left") || status.equals("kicked")) {
                    db.removeTaskSubmission(s.getUserId(), s.getTaskId());
                    db.deductBalance(s.getUserId(), s.getReward());
                    db.decrementTaskCompletions(s.getTaskId());
                    removed++;
                }

                checked++;
                Thread.sleep(50);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        MessageUtils.sendText(this, adminChatId,
                "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\nüë• –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: " + checked + "\n‚ùå –£–¥–∞–ª–µ–Ω–æ: " + removed,
                KeyboardFactory.adminKeyboard(), null, lastBotMessages);
    }
    private void broadcastMessage(String message) {
        List<Long> allUsers = db.getAllUserIds();

        for (Long userId : allUsers) {
            try {
                MessageUtils.sendText(this, userId, message, KeyboardFactory.adminKeyboard(), null, lastBotMessages);
                Thread.sleep(30);
            } catch (Exception e) {
                System.err.println("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + userId);
            }
        }
    }

    private void handleAdminCommands(long chatId, String command) {
        switch (command) {
            case "üìä –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏":
                checkSubscriptions(chatId);
                break;
            case "üìä –û—Ç—á—ë—Ç":
                int users = db.countUsers();
                MessageUtils.sendText(this, chatId, "üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: " + users, KeyboardFactory.adminKeyboard(), null, lastBotMessages);
                break;
            case "üì® –†–∞—Å—Å—ã–ª–∫–∞":
                MessageUtils.sendText(this, chatId, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:",KeyboardFactory.adminKeyboard(), null, lastBotMessages);
                awaitingBroadcastText.put(chatId, true);
                break;
            case "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥":
                List<WithdrawalRequest> requests = db.getAllWithdrawalRequests();
                MessageUtils.sendText(this, chatId, "üì• –ó–∞—è–≤–∫–∏ –Ω–∞ –≤—ã–≤–æ–¥:",
                        KeyboardFactory.withdrawalKeyboard(requests, 1, 6),
                        KeyboardFactory.adminKeyboard(),
                        lastBotMessages);
                break;
        }
    }
}
